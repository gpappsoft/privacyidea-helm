# Default values for privacyidea.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# pi.cfg parameter

# pepper for pi.cfg to secure the installation (default: superSecret)
piPepper: 
# secret for pi.cfg to secure the installation (default: superSecret)
piSecret: 
# password for the initial admin user (default: admin)
piAdminPassword: 
# login for the initial admin (default: admin)
piAdminName: 
# temporary solution for bootstrap. Will be changed to init container
piBootstrap: 
# run database schema update in case of new version. (default: false)
piUpdate: 
# set loglevel (DEBUG,WARNING, INFO...) (default: INFO)
piLogLevel: 
# set super user realm(s) separated by comma (default: admin,helpdesk)
superuserRealm: 
# set privacyidea gunicorn port (default:8080)
piPort: 


## db parameters
##

# set the default db api module for sqlalchemy
dbApi: "mysql+pymysql"
# set the database user
dbUser: pi
# set the database password. Use 'null' to use a sqlite database.
dbPassword: pi
# set the database host
dbHost: 
# set the database port
dbPort: "3306"
# set database name
dbName: pi
# additional parameters for sqlalchemy uri
dbExtraParams: "?charset=utf8"
# set to true if using a database cluster (e.g. galera) to add preping to sql alchemy engine. (default: false)
dbCluster:

mariadb:
  enabled: true
  auth:
   rootPassword: pi
   database: pi
   username: pi
   password: pi
   
nginx:
  enabled: false

image:
  repository: gpappsoft/privacyidea-docker
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: 
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  

ingress:
  enabled: true
  className: ""
  annotations: 
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: 
 - name: pisecrets
   secret:
     secretName: secrets
     items:
      - key: piAdminPassword
        path: "pi_admin_pass"
      - key: piPepper
        path: "pi_pepper"
      - key: piSecret
        path: "pi_secret"
      - key: dbPassword
        path: "db_password"
     optional: false
   

# Additional volumeMounts on the output Deployment definition.
volumeMounts: 
 - name: pisecrets
   mountPath: "/etc/privacyidea/secrets/"

nodeSelector: {}

tolerations: []

affinity: {}
